import * as ɵngcc0 from '@angular/core';
var ValidateEqualDirective_1;
import { __decorate, __param } from "tslib";
import { Directive, forwardRef, Attribute } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
let ValidateEqualDirective = ValidateEqualDirective_1 = class ValidateEqualDirective {
    constructor(otherControl) {
        this.otherControl = otherControl;
    }
    ngOnDestroy() {
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
    }
    validate(selfControl) {
        const selfControlValue = selfControl.value;
        const otherControl = selfControl.root.get(this.otherControl);
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
        // this code works when user types in other control putting the error in self control
        this.valueChangesSub = otherControl.valueChanges.subscribe(otherControlValue => {
            if (!this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {
                selfControl.setErrors({
                    notEqual: true
                });
            }
            else {
                if (selfControl.hasError('notEqual')) {
                    delete selfControl.errors['notEqual'];
                    if (!Object.keys(selfControl.errors).length) {
                        selfControl.setErrors(null);
                    }
                }
            }
        });
        // this code works when the user types in self control putting the error in self control
        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {
            return {
                notEqual: true
            };
        }
        return null;
    }
    isEqual(val1, val2) {
        val1 = this.unifyEmptyStrings(val1);
        val2 = this.unifyEmptyStrings(val2);
        return val1 === val2;
    }
    unifyEmptyStrings(val) {
        const isDefined = this.isDefined;
        if (val === null || !isDefined(val)) {
            val = '';
        }
        return val;
    }
    isDefined(value) {
        const defaultUndefined = void (0);
        return value !== defaultUndefined;
    }
};
ValidateEqualDirective.ɵfac = function ValidateEqualDirective_Factory(t) { return new (t || ValidateEqualDirective)(ɵngcc0.ɵɵinjectAttribute('ngValidateEqual')); };
ValidateEqualDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ValidateEqualDirective, selectors: [["", "ngValidateEqual", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }
        ])] });
ValidateEqualDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }
];
ValidateEqualDirective = ValidateEqualDirective_1 = __decorate([ __param(0, Attribute('ngValidateEqual'))
], ValidateEqualDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualDirective, [{
        type: Directive,
        args: [{
                selector: '[ngValidateEqual]',
                providers: [
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective_1), multi: true }
                ]
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Attribute,
                args: ['ngValidateEqual']
            }] }]; }, null); })();
export { ValidateEqualDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
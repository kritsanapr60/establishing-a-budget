import { __decorate, __param } from "tslib";
import { Directive, forwardRef, Attribute } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
var ValidateEqualDirective = /** @class */ (function () {
    function ValidateEqualDirective(otherControl) {
        this.otherControl = otherControl;
    }
    ValidateEqualDirective_1 = ValidateEqualDirective;
    ValidateEqualDirective.prototype.ngOnDestroy = function () {
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
    };
    ValidateEqualDirective.prototype.validate = function (selfControl) {
        var _this = this;
        var selfControlValue = selfControl.value;
        var otherControl = selfControl.root.get(this.otherControl);
        if (this.valueChangesSub) {
            this.valueChangesSub.unsubscribe();
        }
        // this code works when user types in other control putting the error in self control
        this.valueChangesSub = otherControl.valueChanges.subscribe(function (otherControlValue) {
            if (!_this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {
                selfControl.setErrors({
                    notEqual: true
                });
            }
            else {
                if (selfControl.hasError('notEqual')) {
                    delete selfControl.errors['notEqual'];
                    if (!Object.keys(selfControl.errors).length) {
                        selfControl.setErrors(null);
                    }
                }
            }
        });
        // this code works when the user types in self control putting the error in self control
        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {
            return {
                notEqual: true
            };
        }
        return null;
    };
    ValidateEqualDirective.prototype.isEqual = function (val1, val2) {
        val1 = this.unifyEmptyStrings(val1);
        val2 = this.unifyEmptyStrings(val2);
        return val1 === val2;
    };
    ValidateEqualDirective.prototype.unifyEmptyStrings = function (val) {
        var isDefined = this.isDefined;
        if (val === null || !isDefined(val)) {
            val = '';
        }
        return val;
    };
    ValidateEqualDirective.prototype.isDefined = function (value) {
        var defaultUndefined = void (0);
        return value !== defaultUndefined;
    };
    var ValidateEqualDirective_1;
    ValidateEqualDirective.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Attribute, args: ['ngValidateEqual',] }] }
    ]; };
    ValidateEqualDirective = ValidateEqualDirective_1 = __decorate([ __param(0, Attribute('ngValidateEqual'))
    ], ValidateEqualDirective);
ValidateEqualDirective.ɵfac = function ValidateEqualDirective_Factory(t) { return new (t || ValidateEqualDirective)(ɵngcc0.ɵɵinjectAttribute('ngValidateEqual')); };
ValidateEqualDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ValidateEqualDirective, selectors: [["", "ngValidateEqual", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return ValidateEqualDirective_1; }), multi: true }
        ])] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidateEqualDirective, [{
        type: Directive,
        args: [{
                selector: '[ngValidateEqual]',
                providers: [
                    { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return ValidateEqualDirective_1; }), multi: true }
                ]
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Attribute,
                args: ['ngValidateEqual']
            }] }]; }, null); })();
    return ValidateEqualDirective;
}());
export { ValidateEqualDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdmFsaWRhdGUtZXF1YWwuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZy12YWxpZGF0ZS1lcXVhbC9saWIvbmctdmFsaWRhdGUtZXF1YWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUE4QixhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFTM0U7QUFBMEQsSUFJdEQsZ0NBQWlELFlBQW9CO0FBQ3pFLFFBRHFELGlCQUFZLEdBQVosWUFBWSxDQUFRO0FBQUMsSUFFdEUsQ0FBQztBQUNMLCtCQVBhLHNCQUFzQjtBQUFFLElBUWpDLDRDQUFXLEdBQVg7QUFBYyxRQUNWLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUNsQyxZQUFZLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDL0MsU0FBUztBQUNULElBQUksQ0FBQztBQUVMLElBQUkseUNBQVEsR0FBUixVQUFTLFdBQTRCO0FBQUksUUFBekMsaUJBbUNDO0FBQ0wsUUFsQ1EsSUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO0FBQ25ELFFBQVEsSUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JFLFFBQ1EsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQ2xDLFlBQVksSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUMvQyxTQUFTO0FBQ1QsUUFDUSxxRkFBcUY7QUFDN0YsUUFBUSxJQUFJLENBQUMsZUFBZSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUN0RCxVQUFBLGlCQUFpQjtBQUFJLFlBQ2pCLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLGlCQUFpQixD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QUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBTkEsQUFBQSxBQVFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFtQ0EsQUFqQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFqRUEsQUFBQSxBQUFBLEFBQUEsQUFKQSxBQUFBLEFBTkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUpBLEFBQUEsQUF1RUEsQUFBQSxBQUFBLEFBQUEsQUF2RUEsQUF1RUEsQUF2RUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgQXR0cmlidXRlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVmFsaWRhdG9yLCBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tuZ1ZhbGlkYXRlRXF1YWxdJyxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIHsgcHJvdmlkZTogTkdfVkFMSURBVE9SUywgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVmFsaWRhdGVFcXVhbERpcmVjdGl2ZSksIG11bHRpOiB0cnVlIH1cclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFZhbGlkYXRlRXF1YWxEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uRGVzdHJveSB7XHJcblxyXG4gICAgcHJpdmF0ZSB2YWx1ZUNoYW5nZXNTdWI6IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKCduZ1ZhbGlkYXRlRXF1YWwnKSBwdWJsaWMgb3RoZXJDb250cm9sOiBzdHJpbmcpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVDaGFuZ2VzU3ViKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VzU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlKHNlbGZDb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcclxuXHJcbiAgICAgICAgY29uc3Qgc2VsZkNvbnRyb2xWYWx1ZSA9IHNlbGZDb250cm9sLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IG90aGVyQ29udHJvbCA9IHNlbGZDb250cm9sLnJvb3QuZ2V0KHRoaXMub3RoZXJDb250cm9sKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudmFsdWVDaGFuZ2VzU3ViKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VzU3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aGlzIGNvZGUgd29ya3Mgd2hlbiB1c2VyIHR5cGVzIGluIG90aGVyIGNvbnRyb2wgcHV0dGluZyB0aGUgZXJyb3IgaW4gc2VsZiBjb250cm9sXHJcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZXNTdWIgPSBvdGhlckNvbnRyb2wudmFsdWVDaGFuZ2VzLnN1YnNjcmliZShcclxuICAgICAgICAgICAgb3RoZXJDb250cm9sVmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRXF1YWwoc2VsZkNvbnRyb2xWYWx1ZSwgb3RoZXJDb250cm9sVmFsdWUpICYmIChzZWxmQ29udHJvbC50b3VjaGVkIHx8IHNlbGZDb250cm9sLmRpcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZDb250cm9sLnNldEVycm9ycyhcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RXF1YWw6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmQ29udHJvbC5oYXNFcnJvcignbm90RXF1YWwnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VsZkNvbnRyb2wuZXJyb3JzWydub3RFcXVhbCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHNlbGZDb250cm9sLmVycm9ycykubGVuZ3RoKSB7IHNlbGZDb250cm9sLnNldEVycm9ycyhudWxsKTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIHRoaXMgY29kZSB3b3JrcyB3aGVuIHRoZSB1c2VyIHR5cGVzIGluIHNlbGYgY29udHJvbCBwdXR0aW5nIHRoZSBlcnJvciBpbiBzZWxmIGNvbnRyb2xcclxuICAgICAgICBpZiAoIXRoaXMuaXNFcXVhbChzZWxmQ29udHJvbFZhbHVlLCBvdGhlckNvbnRyb2wudmFsdWUpICYmIChzZWxmQ29udHJvbC50b3VjaGVkIHx8IHNlbGZDb250cm9sLmRpcnR5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbm90RXF1YWw6IHRydWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNFcXVhbCh2YWwxLCB2YWwyKSB7XHJcbiAgICAgICAgdmFsMSA9IHRoaXMudW5pZnlFbXB0eVN0cmluZ3ModmFsMSk7XHJcbiAgICAgICAgdmFsMiA9IHRoaXMudW5pZnlFbXB0eVN0cmluZ3ModmFsMik7XHJcblxyXG4gICAgICAgIHJldHVybiB2YWwxID09PSB2YWwyO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdW5pZnlFbXB0eVN0cmluZ3ModmFsKSB7XHJcbiAgICAgICAgY29uc3QgaXNEZWZpbmVkID0gdGhpcy5pc0RlZmluZWQ7XHJcbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCAhaXNEZWZpbmVkKHZhbCkpIHtcclxuICAgICAgICAgICAgdmFsID0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0RlZmluZWQodmFsdWUpIHtcclxuICAgICAgICBjb25zdCBkZWZhdWx0VW5kZWZpbmVkID0gdm9pZCAoMCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBkZWZhdWx0VW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=
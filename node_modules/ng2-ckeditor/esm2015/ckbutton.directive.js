import { Directive, EventEmitter, Output, Input } from '@angular/core';
/**
 * CKGroup component
 * Usage :
 *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500">
 *      <ckbutton [name]="'SaveButton'" [command]="'saveCommand'" (click)="save($event)"
 *                [icon]="'/save.png'" [toolbar]="'customGroup,1'" [label]="'Save'">
 *      </ckbutton>
 *   </ckeditor>
 */
import * as ɵngcc0 from '@angular/core';
export class CKButtonDirective {
    constructor() {
        this.click = new EventEmitter();
    }
    initialize(editor) {
        editor.instance.addCommand(this.command, {
            exec: (evt) => {
                this.click.emit(evt);
            },
        });
        editor.instance.ui.addButton(this.name, {
            label: this.label,
            command: this.command,
            toolbar: this.toolbar,
            icon: this.icon,
        });
    }
    ngOnInit() {
        if (!this.name)
            throw new Error('Attribute "name" is required on <ckbutton>');
        if (!this.command)
            throw new Error('Attribute "command" is required on <ckbutton>');
    }
}
CKButtonDirective.ɵfac = function CKButtonDirective_Factory(t) { return new (t || CKButtonDirective)(); };
CKButtonDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CKButtonDirective, selectors: [["ckbutton"]], inputs: { label: "label", command: "command", toolbar: "toolbar", name: "name", icon: "icon" }, outputs: { click: "click" } });
CKButtonDirective.propDecorators = {
    click: [{ type: Output }],
    label: [{ type: Input }],
    command: [{ type: Input }],
    toolbar: [{ type: Input }],
    name: [{ type: Input }],
    icon: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CKButtonDirective, [{
        type: Directive,
        args: [{
                selector: 'ckbutton'
            }]
    }], function () { return []; }, { click: [{
            type: Output
        }], label: [{
            type: Input
        }], command: [{
            type: Input
        }], toolbar: [{
            type: Input
        }], name: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tidXR0b24uZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2tidXR0b24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsTUFBTSxPQUFPLGlCQUFpQjtBQUFHLElBSGpDO0FBQ0csUUFHUyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUN2QyxJQXlCQSxDQUFDO0FBQ0QsSUFwQkUsVUFBVSxDQUFDLE1BQXlCO0FBQ3RDLFFBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUM3QyxZQUFNLElBQUksRUFBRSxDQUFDLEdBQVEsRUFBRSxFQUFFO0FBQ3pCLGdCQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLFlBQU0sQ0FBQztBQUNQLFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtBQUM1QyxZQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztBQUN2QixZQUFNLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztBQUMzQixZQUFNLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztBQUMzQixZQUFNLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtBQUNyQixTQUFLLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUTtBQUFLLFFBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJO0FBQUUsWUFBQSxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7QUFDbEYsUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87QUFBRSxZQUFBLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN4RixJQUFFLENBQUM7QUFDSDs2Q0E5QkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxVQUFVO1NBQ3JCLDhOQUNJO0FBQUM7QUFBcUMsb0JBQ3hDLE1BQU07QUFBSyxvQkFDWCxLQUFLO0FBQUssc0JBQ1YsS0FBSztBQUFLLHNCQUNWLEtBQUs7QUFBSyxtQkFDVixLQUFLO0FBQUssbUJBQ1YsS0FBSztBQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENLRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9ja2VkaXRvci5jb21wb25lbnQnO1xuXG4vKipcbiAqIENLR3JvdXAgY29tcG9uZW50XG4gKiBVc2FnZSA6XG4gKiAgPGNrZWRpdG9yIFsobmdNb2RlbCldPVwiZGF0YVwiIFtjb25maWddPVwiey4uLn1cIiBkZWJvdW5jZT1cIjUwMFwiPlxuICogICAgICA8Y2tidXR0b24gW25hbWVdPVwiJ1NhdmVCdXR0b24nXCIgW2NvbW1hbmRdPVwiJ3NhdmVDb21tYW5kJ1wiIChjbGljayk9XCJzYXZlKCRldmVudClcIlxuICogICAgICAgICAgICAgICAgW2ljb25dPVwiJy9zYXZlLnBuZydcIiBbdG9vbGJhcl09XCInY3VzdG9tR3JvdXAsMSdcIiBbbGFiZWxdPVwiJ1NhdmUnXCI+XG4gKiAgICAgIDwvY2tidXR0b24+XG4gKiAgIDwvY2tlZGl0b3I+XG4gKi9cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2NrYnV0dG9uJyxcbn0pXG5leHBvcnQgY2xhc3MgQ0tCdXR0b25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBAT3V0cHV0KCkgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbW1hbmQ6IHN0cmluZztcbiAgQElucHV0KCkgdG9vbGJhcjogc3RyaW5nO1xuICBASW5wdXQoKSBuYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGljb246IHN0cmluZztcblxuICBpbml0aWFsaXplKGVkaXRvcjogQ0tFZGl0b3JDb21wb25lbnQpIHtcbiAgICBlZGl0b3IuaW5zdGFuY2UuYWRkQ29tbWFuZCh0aGlzLmNvbW1hbmQsIHtcbiAgICAgIGV4ZWM6IChldnQ6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLmNsaWNrLmVtaXQoZXZ0KTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBlZGl0b3IuaW5zdGFuY2UudWkuYWRkQnV0dG9uKHRoaXMubmFtZSwge1xuICAgICAgbGFiZWw6IHRoaXMubGFiZWwsXG4gICAgICBjb21tYW5kOiB0aGlzLmNvbW1hbmQsXG4gICAgICB0b29sYmFyOiB0aGlzLnRvb2xiYXIsXG4gICAgICBpY29uOiB0aGlzLmljb24sXG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubmFtZSkgdGhyb3cgbmV3IEVycm9yKCdBdHRyaWJ1dGUgXCJuYW1lXCIgaXMgcmVxdWlyZWQgb24gPGNrYnV0dG9uPicpO1xuICAgIGlmICghdGhpcy5jb21tYW5kKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dHJpYnV0ZSBcImNvbW1hbmRcIiBpcyByZXF1aXJlZCBvbiA8Y2tidXR0b24+Jyk7XG4gIH1cbn1cbiJdfQ==
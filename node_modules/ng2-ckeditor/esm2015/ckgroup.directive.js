import { Directive, Input, ContentChildren } from '@angular/core';
import { CKButtonDirective } from './ckbutton.directive';
/**
 * CKGroup component
 * Usage :
 *  <ckeditor [(ngModel)]="data" [config]="{...}" debounce="500">
 *      <ckgroup [name]="'exampleGroup2'" [previous]="'1'" [subgroupOf]="'exampleGroup1'">
 *          .
 *          .
 *      </ckgroup>
 *   </ckeditor>
 */
import * as ɵngcc0 from '@angular/core';
export class CKGroupDirective {
    ngAfterContentInit() {
        // Reconfigure each button's toolbar property within ckgroup to hold its parent's name
        this.toolbarButtons.forEach((button) => (button.toolbar = this.name));
    }
    initialize(editor) {
        editor.instance.ui.addToolbarGroup(this.name, this.previous, this.subgroupOf);
        // Initialize each button within ckgroup
        this.toolbarButtons.forEach((button) => {
            button.initialize(editor);
        });
    }
}
CKGroupDirective.ɵfac = function CKGroupDirective_Factory(t) { return new (t || CKGroupDirective)(); };
CKGroupDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CKGroupDirective, selectors: [["ckgroup"]], contentQueries: function CKGroupDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, CKButtonDirective, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarButtons = _t);
    } }, inputs: { name: "name", previous: "previous", subgroupOf: "subgroupOf" } });
CKGroupDirective.propDecorators = {
    name: [{ type: Input }],
    previous: [{ type: Input }],
    subgroupOf: [{ type: Input }],
    toolbarButtons: [{ type: ContentChildren, args: [CKButtonDirective,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CKGroupDirective, [{
        type: Directive,
        args: [{
                selector: 'ckgroup'
            }]
    }], null, { name: [{
            type: Input
        }], previous: [{
            type: Input
        }], subgroupOf: [{
            type: Input
        }], toolbarButtons: [{
            type: ContentChildren,
            args: [CKButtonDirective]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ja2dyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0IsZUFBZSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBRS9GLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBSUgsTUFBTSxPQUFPLGdCQUFnQjtBQUFHLElBTTlCLGtCQUFrQjtBQUNwQixRQUFJLHNGQUFzRjtBQUMxRixRQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDMUUsSUFBRSxDQUFDO0FBQ0gsSUFDUyxVQUFVLENBQUMsTUFBeUI7QUFDN0MsUUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsRixRQUFJLHdDQUF3QztBQUM1QyxRQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7QUFDM0MsWUFBTSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSDs0Q0FyQkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxTQUFTO1VBQ3BCOzs7OztxRkFDSTtBQUFDO0FBQW9DLG1CQUN2QyxLQUFLO0FBQUssdUJBQ1YsS0FBSztBQUFLLHlCQUNWLEtBQUs7QUFBSyw2QkFDVixlQUFlLFNBQUMsaUJBQWlCO0FBQU07Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgQWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENLRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9ja2VkaXRvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ0tCdXR0b25EaXJlY3RpdmUgfSBmcm9tICcuL2NrYnV0dG9uLmRpcmVjdGl2ZSc7XG5cbi8qKlxuICogQ0tHcm91cCBjb21wb25lbnRcbiAqIFVzYWdlIDpcbiAqICA8Y2tlZGl0b3IgWyhuZ01vZGVsKV09XCJkYXRhXCIgW2NvbmZpZ109XCJ7Li4ufVwiIGRlYm91bmNlPVwiNTAwXCI+XG4gKiAgICAgIDxja2dyb3VwIFtuYW1lXT1cIidleGFtcGxlR3JvdXAyJ1wiIFtwcmV2aW91c109XCInMSdcIiBbc3ViZ3JvdXBPZl09XCInZXhhbXBsZUdyb3VwMSdcIj5cbiAqICAgICAgICAgIC5cbiAqICAgICAgICAgIC5cbiAqICAgICAgPC9ja2dyb3VwPlxuICogICA8L2NrZWRpdG9yPlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdja2dyb3VwJyxcbn0pXG5leHBvcnQgY2xhc3MgQ0tHcm91cERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICBASW5wdXQoKSBuYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHByZXZpb3VzOiBhbnk7XG4gIEBJbnB1dCgpIHN1Ymdyb3VwT2Y6IHN0cmluZztcbiAgQENvbnRlbnRDaGlsZHJlbihDS0J1dHRvbkRpcmVjdGl2ZSkgdG9vbGJhckJ1dHRvbnM6IFF1ZXJ5TGlzdDxDS0J1dHRvbkRpcmVjdGl2ZT47XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIFJlY29uZmlndXJlIGVhY2ggYnV0dG9uJ3MgdG9vbGJhciBwcm9wZXJ0eSB3aXRoaW4gY2tncm91cCB0byBob2xkIGl0cyBwYXJlbnQncyBuYW1lXG4gICAgdGhpcy50b29sYmFyQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IChidXR0b24udG9vbGJhciA9IHRoaXMubmFtZSkpO1xuICB9XG5cbiAgcHVibGljIGluaXRpYWxpemUoZWRpdG9yOiBDS0VkaXRvckNvbXBvbmVudCkge1xuICAgIGVkaXRvci5pbnN0YW5jZS51aS5hZGRUb29sYmFyR3JvdXAodGhpcy5uYW1lLCB0aGlzLnByZXZpb3VzLCB0aGlzLnN1Ymdyb3VwT2YpO1xuICAgIC8vIEluaXRpYWxpemUgZWFjaCBidXR0b24gd2l0aGluIGNrZ3JvdXBcbiAgICB0aGlzLnRvb2xiYXJCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgYnV0dG9uLmluaXRpYWxpemUoZWRpdG9yKTtcbiAgICB9KTtcbiAgfVxufVxuIl19
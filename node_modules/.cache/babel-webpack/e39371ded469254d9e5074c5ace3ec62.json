{"ast":null,"code":"import _classCallCheck from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { Attribute, Directive, forwardRef, NgModule } from '@angular/core';\nimport { NG_VALIDATORS } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nvar ValidateEqualDirective_1;\n\nvar ValidateEqualDirective = ValidateEqualDirective_1 = /*#__PURE__*/function () {\n  function ValidateEqualDirective(otherControl) {\n    _classCallCheck(this, ValidateEqualDirective);\n\n    this.otherControl = otherControl;\n  }\n\n  _createClass(ValidateEqualDirective, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.valueChangesSub) {\n        this.valueChangesSub.unsubscribe();\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(selfControl) {\n      var _this = this;\n\n      var selfControlValue = selfControl.value;\n      var otherControl = selfControl.root.get(this.otherControl);\n\n      if (this.valueChangesSub) {\n        this.valueChangesSub.unsubscribe();\n      } // this code works when user types in other control putting the error in self control\n\n\n      this.valueChangesSub = otherControl.valueChanges.subscribe(function (otherControlValue) {\n        if (!_this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {\n          selfControl.setErrors({\n            notEqual: true\n          });\n        } else {\n          if (selfControl.hasError('notEqual')) {\n            delete selfControl.errors['notEqual'];\n\n            if (!Object.keys(selfControl.errors).length) {\n              selfControl.setErrors(null);\n            }\n          }\n        }\n      }); // this code works when the user types in self control putting the error in self control\n\n      if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {\n        return {\n          notEqual: true\n        };\n      }\n\n      return null;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(val1, val2) {\n      val1 = this.unifyEmptyStrings(val1);\n      val2 = this.unifyEmptyStrings(val2);\n      return val1 === val2;\n    }\n  }, {\n    key: \"unifyEmptyStrings\",\n    value: function unifyEmptyStrings(val) {\n      var isDefined = this.isDefined;\n\n      if (val === null || !isDefined(val)) {\n        val = '';\n      }\n\n      return val;\n    }\n  }, {\n    key: \"isDefined\",\n    value: function isDefined(value) {\n      var defaultUndefined = void 0;\n      return value !== defaultUndefined;\n    }\n  }]);\n\n  return ValidateEqualDirective;\n}();\n\nValidateEqualDirective.ɵfac = function ValidateEqualDirective_Factory(t) {\n  return new (t || ValidateEqualDirective)(ɵngcc0.ɵɵinjectAttribute('ngValidateEqual'));\n};\n\nValidateEqualDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: ValidateEqualDirective,\n  selectors: [[\"\", \"ngValidateEqual\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () {\n      return ValidateEqualDirective_1;\n    }),\n    multi: true\n  }])]\n});\n\nValidateEqualDirective.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['ngValidateEqual']\n    }]\n  }];\n};\n\nValidateEqualDirective = ValidateEqualDirective_1 = __decorate([__param(0, Attribute('ngValidateEqual'))], ValidateEqualDirective);\n\nvar ValidateEqualModule = function ValidateEqualModule() {\n  _classCallCheck(this, ValidateEqualModule);\n};\n\nValidateEqualModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: ValidateEqualModule\n});\nValidateEqualModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function ValidateEqualModule_Factory(t) {\n    return new (t || ValidateEqualModule)();\n  },\n  imports: [[]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ValidateEqualDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngValidateEqual]',\n      providers: [{\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(function () {\n          return ValidateEqualDirective_1;\n        }),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['ngValidateEqual']\n      }]\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ValidateEqualModule, {\n    declarations: [ValidateEqualDirective],\n    exports: [ValidateEqualDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(ValidateEqualModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ValidateEqualDirective],\n      imports: [],\n      exports: [ValidateEqualDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ng-validate-equal\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ValidateEqualDirective, ValidateEqualModule };","map":{"version":3,"sources":["ng-validate-equal/lib/ng-validate-equal.directive.ts","ng-validate-equal/lib/ng-validate-equal.module.ts","ng-validate-equal/public-api.ts","ng-validate-equal/ng-validate-equal.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, forwardRef, Attribute, OnDestroy } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[ngValidateEqual]',\r\n    providers: [\r\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => ValidateEqualDirective), multi: true }\r\n    ]\r\n})\r\nexport class ValidateEqualDirective implements Validator, OnDestroy {\r\n\r\n    private valueChangesSub: Subscription;\r\n\r\n    constructor(@Attribute('ngValidateEqual') public otherControl: string) {\r\n\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    validate(selfControl: AbstractControl): { [key: string]: any } {\r\n\r\n        const selfControlValue = selfControl.value;\r\n        const otherControl = selfControl.root.get(this.otherControl);\r\n\r\n        if (this.valueChangesSub) {\r\n            this.valueChangesSub.unsubscribe();\r\n        }\r\n\r\n        // this code works when user types in other control putting the error in self control\r\n        this.valueChangesSub = otherControl.valueChanges.subscribe(\r\n            otherControlValue => {\r\n                if (!this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {\r\n                    selfControl.setErrors(\r\n                        {\r\n                            notEqual: true\r\n                        }\r\n                    );\r\n                } else {\r\n                    if (selfControl.hasError('notEqual')) {\r\n                        delete selfControl.errors['notEqual'];\r\n                        if (!Object.keys(selfControl.errors).length) { selfControl.setErrors(null); }\r\n                    }\r\n                }\r\n            }\r\n        );\r\n\r\n        // this code works when the user types in self control putting the error in self control\r\n        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {\r\n            return {\r\n                notEqual: true\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private isEqual(val1, val2) {\r\n        val1 = this.unifyEmptyStrings(val1);\r\n        val2 = this.unifyEmptyStrings(val2);\r\n\r\n        return val1 === val2;\r\n    }\r\n\r\n    private unifyEmptyStrings(val) {\r\n        const isDefined = this.isDefined;\r\n        if (val === null || !isDefined(val)) {\r\n            val = '';\r\n        }\r\n        return val;\r\n    }\r\n\r\n    private isDefined(value) {\r\n        const defaultUndefined = void (0);\r\n        return value !== defaultUndefined;\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { ValidateEqualDirective } from './ng-validate-equal.directive';\n\n\n\n@NgModule({\n  declarations: [ValidateEqualDirective],\n  imports: [],\n  exports: [ValidateEqualDirective]\n})\nexport class ValidateEqualModule { }\n","/*\n * Public API Surface of ng-validate-equal\n */\n\nexport * from './lib/ng-validate-equal.directive';\nexport * from './lib/ng-validate-equal.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}
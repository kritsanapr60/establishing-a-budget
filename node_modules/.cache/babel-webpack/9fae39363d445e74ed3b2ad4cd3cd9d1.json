{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module watchdog/watchdog\n */\n\n/* globals window */\n\n/**\n * An abstract watchdog class that handles most of the error handling process and the state of the underlying component.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and how to use it.\n *\n * @private\n * @abstract\n */\nvar Watchdog = /*#__PURE__*/function () {\n  /**\n   * @param {module:watchdog/watchdog~WatchdogConfig} config The watchdog plugin configuration.\n   */\n  function Watchdog(config) {\n    var _this = this;\n\n    _classCallCheck(this, Watchdog);\n\n    /**\n     * An array of crashes saved as an object with the following properties:\n     *\n     * * `message`: `String`,\n     * * `stack`: `String`,\n     * * `date`: `Number`,\n     * * `filename`: `String | undefined`,\n     * * `lineno`: `Number | undefined`,\n     * * `colno`: `Number | undefined`,\n     *\n     * @public\n     * @readonly\n     * @type {Array.<Object>}\n     */\n    this.crashes = [];\n    /**\n     * Specifies the state of the item watched by the watchdog. The state can be one of the following values:\n     *\n     * * `initializing` &ndash; Before the first initialization, and after crashes, before the item is ready.\n     * * `ready` &ndash; A state when the user can interact with the item.\n     * * `crashed` &ndash; A state when an error occurs. It quickly changes to `initializing` or `crashedPermanently`\n     * depending on how many and how frequent errors have been caught recently.\n     * * `crashedPermanently` &ndash; A state when the watchdog stops reacting to errors and keeps the item it is watching crashed,\n     * * `destroyed` &ndash; A state when the item is manually destroyed by the user after calling `watchdog.destroy()`.\n     *\n     * @public\n     * @type {'initializing'|'ready'|'crashed'|'crashedPermanently'|'destroyed'}\n     */\n\n    this.state = 'initializing';\n    /**\n     * @protected\n     * @type {Number}\n     * @see module:watchdog/watchdog~WatchdogConfig\n     */\n\n    this._crashNumberLimit = typeof config.crashNumberLimit === 'number' ? config.crashNumberLimit : 3;\n    /**\n     * Returns the result of the `Date.now()` call. It can be overridden in tests to mock time as some popular\n     * approaches like `sinon.useFakeTimers()` do not work well with error handling.\n     *\n     * @protected\n     */\n\n    this._now = Date.now;\n    /**\n     * @protected\n     * @type {Number}\n     * @see module:watchdog/watchdog~WatchdogConfig\n     */\n\n    this._minimumNonErrorTimePeriod = typeof config.minimumNonErrorTimePeriod === 'number' ? config.minimumNonErrorTimePeriod : 5000;\n    /**\n     * Checks if the event error comes from the underlying item and restarts the item.\n     *\n     * @private\n     * @type {Function}\n     */\n\n    this._boundErrorHandler = function (evt) {\n      // `evt.error` is exposed by EventError while `evt.reason` is available in PromiseRejectionEvent.\n      var error = evt.error || evt.reason; // Note that `evt.reason` might be everything that is in the promise rejection.\n      // Similarly everything that is thrown lands in `evt.error`.\n\n      if (error instanceof Error) {\n        _this._handleError(error, evt);\n      }\n    };\n    /**\n     * The creation method.\n     *\n     * @protected\n     * @member {Function} #_creator\n     * @see #setCreator\n     */\n\n    /**\n     * The destruction method.\n     *\n     * @protected\n     * @member {Function} #_destructor\n     * @see #setDestructor\n     */\n\n    /**\n     * The watched item.\n     *\n     * @abstract\n     * @protected\n     * @member {Object|undefined} #_item\n     */\n\n    /**\n     * The method responsible for restarting the watched item.\n     *\n     * @abstract\n     * @protected\n     * @method #_restart\n     */\n\n    /**\n     * Traverses the error context and the watched item to find out whether the error should\n     * be handled by the given item.\n     *\n     * @abstract\n     * @protected\n     * @method #_isErrorComingFromThisItem\n     * @param {module:utils/ckeditorerror~CKEditorError} error\n     */\n\n    /**\n     * A dictionary of event emitter listeners.\n     *\n     * @private\n     * @type {Object.<String,Array.<Function>>}\n     */\n\n\n    this._listeners = {};\n\n    if (!this._restart) {\n      throw new Error('The Watchdog class was split into the abstract `Watchdog` class and the `EditorWatchdog` class. ' + 'Please, use `EditorWatchdog` if you have used the `Watchdog` class previously.');\n    }\n  }\n  /**\n   * Sets the function that is responsible for creating watched items.\n   *\n   * @param {Function} creator A callback responsible for creating an item. Returns a promise\n   * that is resolved when the item is created.\n   */\n\n\n  _createClass(Watchdog, [{\n    key: \"setCreator\",\n    value: function setCreator(creator) {\n      this._creator = creator;\n    }\n    /**\n     * Sets the function that is responsible for destroying watched items.\n     *\n     * @param {Function} destructor A callback that takes the item and returns the promise\n     * to the destroying process.\n     */\n\n  }, {\n    key: \"setDestructor\",\n    value: function setDestructor(destructor) {\n      this._destructor = destructor;\n    }\n    /**\n     * Destroys the watchdog and releases the resources.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._stopErrorHandling();\n\n      this._listeners = {};\n    }\n    /**\n     * Starts listening to a specific event name by registering a callback that will be executed\n     * whenever an event with a given name fires.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     *\n     * @param {String} eventName The event name.\n     * @param {Function} callback A callback which will be added to event listeners.\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(eventName, callback) {\n      if (!this._listeners[eventName]) {\n        this._listeners[eventName] = [];\n      }\n\n      this._listeners[eventName].push(callback);\n    }\n    /**\n     * Stops listening to the specified event name by removing the callback from event listeners.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     *\n     * @param {String} eventName The event name.\n     * @param {Function} callback A callback which will be removed from event listeners.\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(eventName, callback) {\n      this._listeners[eventName] = this._listeners[eventName].filter(function (cb) {\n        return cb !== callback;\n      });\n    }\n    /**\n     * Fires an event with a given event name and arguments.\n     *\n     * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n     *\n     * @protected\n     * @param {String} eventName The event name.\n     * @param  {...*} args Event arguments.\n     */\n\n  }, {\n    key: \"_fire\",\n    value: function _fire(eventName) {\n      var callbacks = this._listeners[eventName] || [];\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var _iterator = _createForOfIteratorHelper(callbacks),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var callback = _step.value;\n          callback.apply(this, [null].concat(args));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Starts error handling by attaching global error handlers.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_startErrorHandling\",\n    value: function _startErrorHandling() {\n      window.addEventListener('error', this._boundErrorHandler);\n      window.addEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n     * Stops error handling by detaching global error handlers.\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"_stopErrorHandling\",\n    value: function _stopErrorHandling() {\n      window.removeEventListener('error', this._boundErrorHandler);\n      window.removeEventListener('unhandledrejection', this._boundErrorHandler);\n    }\n    /**\n     * Checks if an error comes from the watched item and restarts it.\n     * It reacts to {@link module:utils/ckeditorerror~CKEditorError `CKEditorError` errors} only.\n     *\n     * @private\n     * @fires error\n     * @param {Error} error Error.\n     * @param {ErrorEvent|PromiseRejectionEvent} evt An error event.\n     */\n\n  }, {\n    key: \"_handleError\",\n    value: function _handleError(error, evt) {\n      // @if CK_DEBUG // if ( error.is && error.is( 'CKEditorError' ) && error.context === undefined ) {\n      // @if CK_DEBUG // console.warn( 'The error is missing its context and Watchdog cannot restart the proper item.' );\n      // @if CK_DEBUG // }\n      if (this._shouldReactToError(error)) {\n        this.crashes.push({\n          message: error.message,\n          stack: error.stack,\n          // `evt.filename`, `evt.lineno` and `evt.colno` are available only in ErrorEvent events\n          filename: evt.filename,\n          lineno: evt.lineno,\n          colno: evt.colno,\n          date: this._now()\n        });\n\n        var causesRestart = this._shouldRestart();\n\n        this.state = 'crashed';\n\n        this._fire('stateChange');\n\n        this._fire('error', {\n          error: error,\n          causesRestart: causesRestart\n        });\n\n        if (causesRestart) {\n          this._restart();\n        } else {\n          this.state = 'crashedPermanently';\n\n          this._fire('stateChange');\n        }\n      }\n    }\n    /**\n     * Checks whether an error should be handled by the watchdog.\n     *\n     * @private\n     * @param {Error} error An error that was caught by the error handling process.\n     */\n\n  }, {\n    key: \"_shouldReactToError\",\n    value: function _shouldReactToError(error) {\n      return error.is && error.is('CKEditorError') && error.context !== undefined && // In some cases the watched item should not be restarted - e.g. during the item initialization.\n      // That's why the `null` was introduced as a correct error context which does cause restarting.\n      error.context !== null && // Do not react to errors if the watchdog is in states other than `ready`.\n      this.state === 'ready' && this._isErrorComingFromThisItem(error);\n    }\n    /**\n     * Checks if the watchdog should restart the underlying item.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_shouldRestart\",\n    value: function _shouldRestart() {\n      if (this.crashes.length <= this._crashNumberLimit) {\n        return true;\n      }\n\n      var lastErrorTime = this.crashes[this.crashes.length - 1].date;\n      var firstMeaningfulErrorTime = this.crashes[this.crashes.length - 1 - this._crashNumberLimit].date;\n      var averageNonErrorTimePeriod = (lastErrorTime - firstMeaningfulErrorTime) / this._crashNumberLimit;\n      return averageNonErrorTimePeriod > this._minimumNonErrorTimePeriod;\n    }\n    /**\n     * Fired when a new {@link module:utils/ckeditorerror~CKEditorError `CKEditorError`} error connected to the watchdog instance occurs\n     * and the watchdog will react to it.\n     *\n     * \twatchdog.on( 'error', ( evt, { error, causesRestart } ) => {\n     * \t\tconsole.log( 'An error occurred.' );\n     * \t} );\n     *\n     * @event error\n     */\n\n  }]);\n\n  return Watchdog;\n}();\n/**\n * The watchdog plugin configuration.\n *\n * @typedef {Object} WatchdogConfig\n *\n * @property {Number} [crashNumberLimit=3] A threshold specifying the number of watched item crashes\n * when the watchdog stops restarting the item in case of errors.\n * After this limit is reached and the time between the last errors is shorter than `minimumNonErrorTimePeriod`,\n * the watchdog changes its state to `crashedPermanently` and it stops restarting the item. This prevents an infinite restart loop.\n *\n * @property {Number} [minimumNonErrorTimePeriod=5000] An average number of milliseconds between the last watched item errors\n * (defaults to 5000). When the period of time between errors is lower than that and the `crashNumberLimit` is also reached,\n * the watchdog changes its state to `crashedPermanently` and it stops restarting the item. This prevents an infinite restart loop.\n *\n * @property {Number} [saveInterval=5000] A minimum number of milliseconds between saving the editor data internally (defaults to 5000).\n * Note that for large documents this might impact the editor performance.\n */\n\n\nexport { Watchdog as default };","map":{"version":3,"sources":["/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@ckeditor/ckeditor5-watchdog/src/watchdog.js"],"names":["Watchdog","config","crashes","state","_crashNumberLimit","crashNumberLimit","_now","Date","now","_minimumNonErrorTimePeriod","minimumNonErrorTimePeriod","_boundErrorHandler","evt","error","reason","Error","_handleError","_listeners","_restart","creator","_creator","destructor","_destructor","_stopErrorHandling","eventName","callback","push","filter","cb","callbacks","args","apply","window","addEventListener","removeEventListener","_shouldReactToError","message","stack","filename","lineno","colno","date","causesRestart","_shouldRestart","_fire","is","context","undefined","_isErrorComingFromThisItem","length","lastErrorTime","firstMeaningfulErrorTime","averageNonErrorTimePeriod"],"mappings":"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","sourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module watchdog/watchdog\n */\n\n/* globals window */\n\n/**\n * An abstract watchdog class that handles most of the error handling process and the state of the underlying component.\n *\n * See the {@glink features/watchdog Watchdog feature guide} to learn the rationale behind it and how to use it.\n *\n * @private\n * @abstract\n */\nexport default class Watchdog {\n\t/**\n\t * @param {module:watchdog/watchdog~WatchdogConfig} config The watchdog plugin configuration.\n\t */\n\tconstructor( config ) {\n\t\t/**\n\t\t * An array of crashes saved as an object with the following properties:\n\t\t *\n\t\t * * `message`: `String`,\n\t\t * * `stack`: `String`,\n\t\t * * `date`: `Number`,\n\t\t * * `filename`: `String | undefined`,\n\t\t * * `lineno`: `Number | undefined`,\n\t\t * * `colno`: `Number | undefined`,\n\t\t *\n\t\t * @public\n\t\t * @readonly\n\t\t * @type {Array.<Object>}\n\t\t */\n\t\tthis.crashes = [];\n\n\t\t/**\n\t\t * Specifies the state of the item watched by the watchdog. The state can be one of the following values:\n\t\t *\n\t\t * * `initializing` &ndash; Before the first initialization, and after crashes, before the item is ready.\n\t\t * * `ready` &ndash; A state when the user can interact with the item.\n\t\t * * `crashed` &ndash; A state when an error occurs. It quickly changes to `initializing` or `crashedPermanently`\n\t\t * depending on how many and how frequent errors have been caught recently.\n\t\t * * `crashedPermanently` &ndash; A state when the watchdog stops reacting to errors and keeps the item it is watching crashed,\n\t\t * * `destroyed` &ndash; A state when the item is manually destroyed by the user after calling `watchdog.destroy()`.\n\t\t *\n\t\t * @public\n\t\t * @type {'initializing'|'ready'|'crashed'|'crashedPermanently'|'destroyed'}\n\t\t */\n\t\tthis.state = 'initializing';\n\n\t\t/**\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @see module:watchdog/watchdog~WatchdogConfig\n\t\t */\n\t\tthis._crashNumberLimit = typeof config.crashNumberLimit === 'number' ? config.crashNumberLimit : 3;\n\n\t\t/**\n\t\t * Returns the result of the `Date.now()` call. It can be overridden in tests to mock time as some popular\n\t\t * approaches like `sinon.useFakeTimers()` do not work well with error handling.\n\t\t *\n\t\t * @protected\n\t\t */\n\t\tthis._now = Date.now;\n\n\t\t/**\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @see module:watchdog/watchdog~WatchdogConfig\n\t\t */\n\t\tthis._minimumNonErrorTimePeriod = typeof config.minimumNonErrorTimePeriod === 'number' ? config.minimumNonErrorTimePeriod : 5000;\n\n\t\t/**\n\t\t * Checks if the event error comes from the underlying item and restarts the item.\n\t\t *\n\t\t * @private\n\t\t * @type {Function}\n\t\t */\n\t\tthis._boundErrorHandler = evt => {\n\t\t\t// `evt.error` is exposed by EventError while `evt.reason` is available in PromiseRejectionEvent.\n\t\t\tconst error = evt.error || evt.reason;\n\n\t\t\t// Note that `evt.reason` might be everything that is in the promise rejection.\n\t\t\t// Similarly everything that is thrown lands in `evt.error`.\n\t\t\tif ( error instanceof Error ) {\n\t\t\t\tthis._handleError( error, evt );\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * The creation method.\n\t\t *\n\t\t * @protected\n\t\t * @member {Function} #_creator\n\t\t * @see #setCreator\n\t\t */\n\n\t\t/**\n\t\t * The destruction method.\n\t\t *\n\t\t * @protected\n\t\t * @member {Function} #_destructor\n\t\t * @see #setDestructor\n\t\t */\n\n\t\t/**\n\t\t * The watched item.\n\t\t *\n\t\t * @abstract\n\t\t * @protected\n\t\t * @member {Object|undefined} #_item\n\t\t */\n\n\t\t/**\n\t\t * The method responsible for restarting the watched item.\n\t\t *\n\t\t * @abstract\n\t\t * @protected\n\t\t * @method #_restart\n\t\t */\n\n\t\t/**\n\t\t * Traverses the error context and the watched item to find out whether the error should\n\t\t * be handled by the given item.\n\t\t *\n\t\t * @abstract\n\t\t * @protected\n\t\t * @method #_isErrorComingFromThisItem\n\t\t * @param {module:utils/ckeditorerror~CKEditorError} error\n\t\t */\n\n\t\t/**\n\t\t * A dictionary of event emitter listeners.\n\t\t *\n\t\t * @private\n\t\t * @type {Object.<String,Array.<Function>>}\n\t\t */\n\t\tthis._listeners = {};\n\n\t\tif ( !this._restart ) {\n\t\t\tthrow new Error(\n\t\t\t\t'The Watchdog class was split into the abstract `Watchdog` class and the `EditorWatchdog` class. ' +\n\t\t\t\t'Please, use `EditorWatchdog` if you have used the `Watchdog` class previously.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the function that is responsible for creating watched items.\n\t *\n\t * @param {Function} creator A callback responsible for creating an item. Returns a promise\n\t * that is resolved when the item is created.\n\t */\n\tsetCreator( creator ) {\n\t\tthis._creator = creator;\n\t}\n\n\t/**\n\t * Sets the function that is responsible for destroying watched items.\n\t *\n\t * @param {Function} destructor A callback that takes the item and returns the promise\n\t * to the destroying process.\n\t */\n\tsetDestructor( destructor ) {\n\t\tthis._destructor = destructor;\n\t}\n\n\t/**\n\t * Destroys the watchdog and releases the resources.\n\t */\n\tdestroy() {\n\t\tthis._stopErrorHandling();\n\n\t\tthis._listeners = {};\n\t}\n\n\t/**\n\t * Starts listening to a specific event name by registering a callback that will be executed\n\t * whenever an event with a given name fires.\n\t *\n\t * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n\t *\n\t * @param {String} eventName The event name.\n\t * @param {Function} callback A callback which will be added to event listeners.\n\t */\n\ton( eventName, callback ) {\n\t\tif ( !this._listeners[ eventName ] ) {\n\t\t\tthis._listeners[ eventName ] = [];\n\t\t}\n\n\t\tthis._listeners[ eventName ].push( callback );\n\t}\n\n\t/**\n\t * Stops listening to the specified event name by removing the callback from event listeners.\n\t *\n\t * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n\t *\n\t * @param {String} eventName The event name.\n\t * @param {Function} callback A callback which will be removed from event listeners.\n\t */\n\toff( eventName, callback ) {\n\t\tthis._listeners[ eventName ] = this._listeners[ eventName ]\n\t\t\t.filter( cb => cb !== callback );\n\t}\n\n\t/**\n\t * Fires an event with a given event name and arguments.\n\t *\n\t * Note that this method differs from the CKEditor 5's default `EventEmitterMixin` implementation.\n\t *\n\t * @protected\n\t * @param {String} eventName The event name.\n\t * @param  {...*} args Event arguments.\n\t */\n\t_fire( eventName, ...args ) {\n\t\tconst callbacks = this._listeners[ eventName ] || [];\n\n\t\tfor ( const callback of callbacks ) {\n\t\t\tcallback.apply( this, [ null, ...args ] );\n\t\t}\n\t}\n\n\t/**\n\t * Starts error handling by attaching global error handlers.\n\t *\n\t * @protected\n\t */\n\t_startErrorHandling() {\n\t\twindow.addEventListener( 'error', this._boundErrorHandler );\n\t\twindow.addEventListener( 'unhandledrejection', this._boundErrorHandler );\n\t}\n\n\t/**\n\t * Stops error handling by detaching global error handlers.\n\t *\n\t * @protected\n\t */\n\t_stopErrorHandling() {\n\t\twindow.removeEventListener( 'error', this._boundErrorHandler );\n\t\twindow.removeEventListener( 'unhandledrejection', this._boundErrorHandler );\n\t}\n\n\t/**\n\t * Checks if an error comes from the watched item and restarts it.\n\t * It reacts to {@link module:utils/ckeditorerror~CKEditorError `CKEditorError` errors} only.\n\t *\n\t * @private\n\t * @fires error\n\t * @param {Error} error Error.\n\t * @param {ErrorEvent|PromiseRejectionEvent} evt An error event.\n\t */\n\t_handleError( error, evt ) {\n\t\t// @if CK_DEBUG // if ( error.is && error.is( 'CKEditorError' ) && error.context === undefined ) {\n\t\t// @if CK_DEBUG // console.warn( 'The error is missing its context and Watchdog cannot restart the proper item.' );\n\t\t// @if CK_DEBUG // }\n\n\t\tif ( this._shouldReactToError( error ) ) {\n\t\t\tthis.crashes.push( {\n\t\t\t\tmessage: error.message,\n\t\t\t\tstack: error.stack,\n\n\t\t\t\t// `evt.filename`, `evt.lineno` and `evt.colno` are available only in ErrorEvent events\n\t\t\t\tfilename: evt.filename,\n\t\t\t\tlineno: evt.lineno,\n\t\t\t\tcolno: evt.colno,\n\t\t\t\tdate: this._now()\n\t\t\t} );\n\n\t\t\tconst causesRestart = this._shouldRestart();\n\n\t\t\tthis.state = 'crashed';\n\t\t\tthis._fire( 'stateChange' );\n\t\t\tthis._fire( 'error', { error, causesRestart } );\n\n\t\t\tif ( causesRestart ) {\n\t\t\t\tthis._restart();\n\t\t\t} else {\n\t\t\t\tthis.state = 'crashedPermanently';\n\t\t\t\tthis._fire( 'stateChange' );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether an error should be handled by the watchdog.\n\t *\n\t * @private\n\t * @param {Error} error An error that was caught by the error handling process.\n\t */\n\t_shouldReactToError( error ) {\n\t\treturn (\n\t\t\terror.is &&\n\t\t\terror.is( 'CKEditorError' ) &&\n\t\t\terror.context !== undefined &&\n\n\t\t\t// In some cases the watched item should not be restarted - e.g. during the item initialization.\n\t\t\t// That's why the `null` was introduced as a correct error context which does cause restarting.\n\t\t\terror.context !== null &&\n\n\t\t\t// Do not react to errors if the watchdog is in states other than `ready`.\n\t\t\tthis.state === 'ready' &&\n\n\t\t\tthis._isErrorComingFromThisItem( error )\n\t\t);\n\t}\n\n\t/**\n\t * Checks if the watchdog should restart the underlying item.\n\t *\n\t * @private\n\t */\n\t_shouldRestart() {\n\t\tif ( this.crashes.length <= this._crashNumberLimit ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst lastErrorTime = this.crashes[ this.crashes.length - 1 ].date;\n\t\tconst firstMeaningfulErrorTime = this.crashes[ this.crashes.length - 1 - this._crashNumberLimit ].date;\n\n\t\tconst averageNonErrorTimePeriod = ( lastErrorTime - firstMeaningfulErrorTime ) / this._crashNumberLimit;\n\n\t\treturn averageNonErrorTimePeriod > this._minimumNonErrorTimePeriod;\n\t}\n\n\t/**\n\t * Fired when a new {@link module:utils/ckeditorerror~CKEditorError `CKEditorError`} error connected to the watchdog instance occurs\n\t * and the watchdog will react to it.\n\t *\n\t * \twatchdog.on( 'error', ( evt, { error, causesRestart } ) => {\n\t * \t\tconsole.log( 'An error occurred.' );\n\t * \t} );\n\t *\n\t * @event error\n\t */\n}\n\n/**\n * The watchdog plugin configuration.\n *\n * @typedef {Object} WatchdogConfig\n *\n * @property {Number} [crashNumberLimit=3] A threshold specifying the number of watched item crashes\n * when the watchdog stops restarting the item in case of errors.\n * After this limit is reached and the time between the last errors is shorter than `minimumNonErrorTimePeriod`,\n * the watchdog changes its state to `crashedPermanently` and it stops restarting the item. This prevents an infinite restart loop.\n *\n * @property {Number} [minimumNonErrorTimePeriod=5000] An average number of milliseconds between the last watched item errors\n * (defaults to 5000). When the period of time between errors is lower than that and the `crashNumberLimit` is also reached,\n * the watchdog changes its state to `crashedPermanently` and it stops restarting the item. This prevents an infinite restart loop.\n *\n * @property {Number} [saveInterval=5000] A minimum number of milliseconds between saving the editor data internally (defaults to 5000).\n * Note that for large documents this might impact the editor performance.\n */\n"]},"metadata":{},"sourceType":"module"}
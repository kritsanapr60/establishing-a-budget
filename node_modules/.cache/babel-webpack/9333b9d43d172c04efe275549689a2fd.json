{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module watchdog/utils/areconnectedthroughproperties\n */\n\n/* globals console */\nimport getSubNodes from './getsubnodes';\n/**\n * Traverses both structures to find out whether there is a reference that is shared between both structures.\n *\n * @param {Object|Array} target1\n * @param {Object|Array} target2\n */\n\nexport default function areConnectedThroughProperties(target1, target2) {\n  var excludedNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n\n  if (target1 === target2 && isObject(target1)) {\n    return true;\n  } // @if CK_DEBUG_WATCHDOG // return checkConnectionBetweenProps( target1, target2, excludedNodes );\n\n\n  var subNodes1 = getSubNodes(target1, excludedNodes);\n  var subNodes2 = getSubNodes(target2, excludedNodes);\n\n  var _iterator = _createForOfIteratorHelper(subNodes1),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n\n      if (subNodes2.has(node)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}\n/* istanbul ignore next */\n// eslint-disable-next-line\n\nfunction checkConnectionBetweenProps(target1, target2, excludedNodes) {\n  var _getSubNodes = getSubNodes(target1, excludedNodes.subNodes),\n      subNodes1 = _getSubNodes.subNodes,\n      prevNodeMap1 = _getSubNodes.prevNodeMap;\n\n  var _getSubNodes2 = getSubNodes(target2, excludedNodes.subNodes),\n      subNodes2 = _getSubNodes2.subNodes,\n      prevNodeMap2 = _getSubNodes2.prevNodeMap;\n\n  var _iterator2 = _createForOfIteratorHelper(subNodes1),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var sharedNode = _step2.value;\n\n      if (subNodes2.has(sharedNode)) {\n        var connection = [];\n        connection.push(sharedNode);\n        var node = prevNodeMap1.get(sharedNode);\n\n        while (node && node !== target1) {\n          connection.push(node);\n          node = prevNodeMap1.get(node);\n        }\n\n        node = prevNodeMap2.get(sharedNode);\n\n        while (node && node !== target2) {\n          connection.unshift(node);\n          node = prevNodeMap2.get(node);\n        }\n\n        console.log('--------');\n        console.log({\n          target1: target1\n        });\n        console.log({\n          sharedNode: sharedNode\n        });\n        console.log({\n          target2: target2\n        });\n        console.log({\n          connection: connection\n        });\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return false;\n}\n\nfunction isObject(structure) {\n  return typeof structure === 'object' && structure !== null;\n}","map":null,"metadata":{},"sourceType":"module"}
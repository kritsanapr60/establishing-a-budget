{"ast":null,"code":"import _classCallCheck from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\n\nvar MAT_MOMENT_DATE_ADAPTER_OPTIONS = /*@__PURE__*/new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false\n  };\n}\n/** Creates an array and fills it with values. */\n\n\nfunction range(length, valueFunction) {\n  var valuesArray = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n\nvar MomentDateAdapter = /*@__PURE__*/function () {\n  var MomentDateAdapter = /*#__PURE__*/function (_DateAdapter) {\n    _inherits(MomentDateAdapter, _DateAdapter);\n\n    var _super = _createSuper(MomentDateAdapter);\n\n    function MomentDateAdapter(dateLocale, _options) {\n      var _this;\n\n      _classCallCheck(this, MomentDateAdapter);\n\n      _this = _super.call(this);\n      _this._options = _options;\n\n      _this.setLocale(dateLocale || moment.locale());\n\n      return _this;\n    }\n\n    _createClass(MomentDateAdapter, [{\n      key: \"setLocale\",\n      value: function setLocale(locale) {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(MomentDateAdapter.prototype), \"setLocale\", this).call(this, locale);\n\n        var momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n          firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n          longMonths: momentLocaleData.months(),\n          shortMonths: momentLocaleData.monthsShort(),\n          dates: range(31, function (i) {\n            return _this2.createDate(2017, 0, i + 1).format('D');\n          }),\n          longDaysOfWeek: momentLocaleData.weekdays(),\n          shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n          narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n        };\n      }\n    }, {\n      key: \"getYear\",\n      value: function getYear(date) {\n        return this.clone(date).year();\n      }\n    }, {\n      key: \"getMonth\",\n      value: function getMonth(date) {\n        return this.clone(date).month();\n      }\n    }, {\n      key: \"getDate\",\n      value: function getDate(date) {\n        return this.clone(date).date();\n      }\n    }, {\n      key: \"getDayOfWeek\",\n      value: function getDayOfWeek(date) {\n        return this.clone(date).day();\n      }\n    }, {\n      key: \"getMonthNames\",\n      value: function getMonthNames(style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n      }\n    }, {\n      key: \"getDateNames\",\n      value: function getDateNames() {\n        return this._localeData.dates;\n      }\n    }, {\n      key: \"getDayOfWeekNames\",\n      value: function getDayOfWeekNames(style) {\n        if (style == 'long') {\n          return this._localeData.longDaysOfWeek;\n        }\n\n        if (style == 'short') {\n          return this._localeData.shortDaysOfWeek;\n        }\n\n        return this._localeData.narrowDaysOfWeek;\n      }\n    }, {\n      key: \"getYearName\",\n      value: function getYearName(date) {\n        return this.clone(date).format('YYYY');\n      }\n    }, {\n      key: \"getFirstDayOfWeek\",\n      value: function getFirstDayOfWeek() {\n        return this._localeData.firstDayOfWeek;\n      }\n    }, {\n      key: \"getNumDaysInMonth\",\n      value: function getNumDaysInMonth(date) {\n        return this.clone(date).daysInMonth();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone(date) {\n        return date.clone().locale(this.locale);\n      }\n    }, {\n      key: \"createDate\",\n      value: function createDate(year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          if (month < 0 || month > 11) {\n            throw Error(\"Invalid month index \\\"\".concat(month, \"\\\". Month index has to be between 0 and 11.\"));\n          }\n\n          if (date < 1) {\n            throw Error(\"Invalid date \\\"\".concat(date, \"\\\". Date has to be greater than 0.\"));\n          }\n        }\n\n        var result = this._createMoment({\n          year: year,\n          month: month,\n          date: date\n        }).locale(this.locale); // If the result isn't valid, the date must have been out of bounds for this month.\n\n\n        if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error(\"Invalid date \\\"\".concat(date, \"\\\" for month with index \\\"\").concat(month, \"\\\".\"));\n        }\n\n        return result;\n      }\n    }, {\n      key: \"today\",\n      value: function today() {\n        return this._createMoment().locale(this.locale);\n      }\n    }, {\n      key: \"parse\",\n      value: function parse(value, parseFormat) {\n        if (value && typeof value == 'string') {\n          return this._createMoment(value, parseFormat, this.locale);\n        }\n\n        return value ? this._createMoment(value).locale(this.locale) : null;\n      }\n    }, {\n      key: \"format\",\n      value: function format(date, displayFormat) {\n        date = this.clone(date);\n\n        if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n\n        return date.format(displayFormat);\n      }\n    }, {\n      key: \"addCalendarYears\",\n      value: function addCalendarYears(date, years) {\n        return this.clone(date).add({\n          years: years\n        });\n      }\n    }, {\n      key: \"addCalendarMonths\",\n      value: function addCalendarMonths(date, months) {\n        return this.clone(date).add({\n          months: months\n        });\n      }\n    }, {\n      key: \"addCalendarDays\",\n      value: function addCalendarDays(date, days) {\n        return this.clone(date).add({\n          days: days\n        });\n      }\n    }, {\n      key: \"toIso8601\",\n      value: function toIso8601(date) {\n        return this.clone(date).format();\n      }\n      /**\n       * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n       * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n       * string into null. Returns an invalid date for all other values.\n       */\n\n    }, {\n      key: \"deserialize\",\n      value: function deserialize(value) {\n        var date;\n\n        if (value instanceof Date) {\n          date = this._createMoment(value).locale(this.locale);\n        } else if (this.isDateInstance(value)) {\n          // Note: assumes that cloning also sets the correct locale.\n          return this.clone(value);\n        }\n\n        if (typeof value === 'string') {\n          if (!value) {\n            return null;\n          }\n\n          date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n\n        if (date && this.isValid(date)) {\n          return this._createMoment(date).locale(this.locale);\n        }\n\n        return _get(_getPrototypeOf(MomentDateAdapter.prototype), \"deserialize\", this).call(this, value);\n      }\n    }, {\n      key: \"isDateInstance\",\n      value: function isDateInstance(obj) {\n        return moment.isMoment(obj);\n      }\n    }, {\n      key: \"isValid\",\n      value: function isValid(date) {\n        return this.clone(date).isValid();\n      }\n    }, {\n      key: \"invalid\",\n      value: function invalid() {\n        return moment.invalid();\n      }\n      /** Creates a Moment instance while respecting the current UTC settings. */\n\n    }, {\n      key: \"_createMoment\",\n      value: function _createMoment(date, format, locale) {\n        var _ref = this._options || {},\n            strict = _ref.strict,\n            useUtc = _ref.useUtc;\n\n        return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n      }\n    }]);\n\n    return MomentDateAdapter;\n  }(DateAdapter);\n\n  MomentDateAdapter.ɵfac = function MomentDateAdapter_Factory(t) {\n    return new (t || MomentDateAdapter)(ɵngcc0.ɵɵinject(MAT_DATE_LOCALE, 8), ɵngcc0.ɵɵinject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8));\n  };\n\n  MomentDateAdapter.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MomentDateAdapter,\n    factory: MomentDateAdapter.ɵfac\n  });\n  return MomentDateAdapter;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MAT_MOMENT_DATE_FORMATS = {\n  parse: {\n    dateInput: 'l'\n  },\n  display: {\n    dateInput: 'l',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\n\nvar MomentDateModule = /*@__PURE__*/function () {\n  var MomentDateModule = function MomentDateModule() {\n    _classCallCheck(this, MomentDateModule);\n  };\n\n  MomentDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MomentDateModule\n  });\n  MomentDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function MomentDateModule_Factory(t) {\n      return new (t || MomentDateModule)();\n    },\n    providers: [{\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    }]\n  });\n  return MomentDateModule;\n}();\n\nvar ɵ0 = MAT_MOMENT_DATE_FORMATS;\n\nvar MatMomentDateModule = /*@__PURE__*/function () {\n  var MatMomentDateModule = function MatMomentDateModule() {\n    _classCallCheck(this, MatMomentDateModule);\n  };\n\n  MatMomentDateModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatMomentDateModule\n  });\n  MatMomentDateModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function MatMomentDateModule_Factory(t) {\n      return new (t || MatMomentDateModule)();\n    },\n    providers: [{\n      provide: MAT_DATE_FORMATS,\n      useValue: ɵ0\n    }],\n    imports: [[MomentDateModule]]\n  });\n  return MatMomentDateModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatMomentDateModule, {\n    imports: [MomentDateModule]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule, ɵ0 };","map":null,"metadata":{},"sourceType":"module"}
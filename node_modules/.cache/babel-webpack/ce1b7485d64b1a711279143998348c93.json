{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __awaiter } from 'tslib';\nimport { EventEmitter, Component, forwardRef, ElementRef, NgZone, Input, Output, NgModule } from '@angular/core';\nimport EditorWatchdog from '@ckeditor/ckeditor5-watchdog/src/editorwatchdog';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nfunction CKEditorComponent_ng_template_0_Template(rf, ctx) {}\n\nvar ɵ0 = function ɵ0(val, index) {\n  return ('0' + index.toString(16)).slice(-2);\n}; // A copy of @ckeditor/ckeditor5-utils/src/uid.js\n// A hash table of hex numbers to avoid using toString() in uid() which is costly.\n// [ '00', '01', '02', ..., 'fe', 'ff' ]\n\n\nvar HEX_NUMBERS =\n/*@__PURE__*/\n\n/*@__PURE__*/\n\n/*@__PURE__*/\nnew Array(256).fill(0).map(ɵ0);\n/**\n * Returns a unique id. The id starts with an \"e\" character and a randomly generated string of\n * 32 alphanumeric characters.\n *\n * **Note**: The characters the unique id is built from correspond to the hex number notation\n * (from \"0\" to \"9\", from \"a\" to \"f\"). In other words, each id corresponds to an \"e\" followed\n * by 16 8-bit numbers next to each other.\n *\n * @returns An unique id string.\n */\n\nfunction uid() {\n  // Let's create some positive random 32bit integers first.\n  //\n  // 1. Math.random() is a float between 0 and 1.\n  // 2. 0x100000000 is 2^32 = 4294967296.\n  // 3. >>> 0 enforces integer (in JS all numbers are floating point).\n  //\n  // For instance:\n  //\t\tMath.random() * 0x100000000 = 3366450031.853859\n  // but\n  //\t\tMath.random() * 0x100000000 >>> 0 = 3366450031.\n  var r1 = Math.random() * 0x100000000 >>> 0;\n  var r2 = Math.random() * 0x100000000 >>> 0;\n  var r3 = Math.random() * 0x100000000 >>> 0;\n  var r4 = Math.random() * 0x100000000 >>> 0; // Make sure that id does not start with number.\n\n  return 'e' + HEX_NUMBERS[r1 >> 0 & 0xFF] + HEX_NUMBERS[r1 >> 8 & 0xFF] + HEX_NUMBERS[r1 >> 16 & 0xFF] + HEX_NUMBERS[r1 >> 24 & 0xFF] + HEX_NUMBERS[r2 >> 0 & 0xFF] + HEX_NUMBERS[r2 >> 8 & 0xFF] + HEX_NUMBERS[r2 >> 16 & 0xFF] + HEX_NUMBERS[r2 >> 24 & 0xFF] + HEX_NUMBERS[r3 >> 0 & 0xFF] + HEX_NUMBERS[r3 >> 8 & 0xFF] + HEX_NUMBERS[r3 >> 16 & 0xFF] + HEX_NUMBERS[r3 >> 24 & 0xFF] + HEX_NUMBERS[r4 >> 0 & 0xFF] + HEX_NUMBERS[r4 >> 8 & 0xFF] + HEX_NUMBERS[r4 >> 16 & 0xFF] + HEX_NUMBERS[r4 >> 24 & 0xFF];\n}\n\nvar CKEditorComponent = /*@__PURE__*/function () {\n  var CKEditorComponent = /*#__PURE__*/function () {\n    function CKEditorComponent(elementRef, ngZone) {\n      _classCallCheck(this, CKEditorComponent);\n\n      /**\n       * The configuration of the editor.\n       * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n       * to learn more.\n       */\n      this.config = {};\n      /**\n       * The initial data of the editor. Useful when not using the ngModel.\n       * See https://angular.io/api/forms/NgModel to learn more.\n       */\n\n      this.data = '';\n      /**\n       * Tag name of the editor component.\n       *\n       * The default tag is 'div'.\n       */\n\n      this.tagName = 'div';\n      /**\n       * Fires when the editor is ready. It corresponds with the `editor#ready`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n       * event.\n       */\n\n      this.ready = new EventEmitter();\n      /**\n       * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n       * event.\n       */\n\n      this.change = new EventEmitter();\n      /**\n       * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n       * event.\n       */\n\n      this.blur = new EventEmitter();\n      /**\n       * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n       * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n       * event.\n       */\n\n      this.focus = new EventEmitter();\n      /**\n       * Fires when the editor component crashes.\n       */\n\n      this.error = new EventEmitter();\n      /**\n       * If the component is read–only before the editor instance is created, it remembers that state,\n       * so the editor can become read–only once it is ready.\n       */\n\n      this.initiallyDisabled = false;\n      /**\n       * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n       */\n\n      this.isEditorSettingData = false;\n      this.id = uid();\n      this.ngZone = ngZone;\n      this.elementRef = elementRef;\n    }\n    /**\n     * When set `true`, the editor becomes read-only.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n     * to learn more.\n     */\n\n\n    _createClass(CKEditorComponent, [{\n      key: \"ngAfterViewInit\",\n      // Implementing the AfterViewInit interface.\n      value: function ngAfterViewInit() {\n        this.attachToWatchdog();\n      } // Implementing the OnDestroy interface.\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!this.watchdog) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return this.watchdog.remove(this.id);\n\n                case 3:\n                  _context.next = 9;\n                  break;\n\n                case 5:\n                  if (!(this.editorWatchdog && this.editorWatchdog.editor)) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return this.editorWatchdog.destroy();\n\n                case 8:\n                  this.editorWatchdog = undefined;\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        // This method is called with the `null` value when the form resets.\n        // A component's responsibility is to restore to the initial state.\n        if (value === null) {\n          value = '';\n        } // If already initialized.\n\n\n        if (this.editorInstance) {\n          // The lock mechanism prevents from calling `cvaOnChange()` during changing\n          // the editor state. See #139\n          this.isEditorSettingData = true;\n          this.editorInstance.setData(value);\n          this.isEditorSettingData = false;\n        } // If not, wait for it to be ready; store the data.\n        else {\n            this.data = value; // If the editor element is already available, then update its content.\n            // If the ngModel is used then the editor element should be updated directly here.\n\n            if (this.editorElement) {\n              this.editorElement.innerHTML = this.data;\n            }\n          }\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(callback) {\n        this.cvaOnChange = callback;\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(callback) {\n        this.cvaOnTouched = callback;\n      } // Implementing the ControlValueAccessor interface (only when binding to ngModel).\n\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        // If already initialized.\n        if (this.editorInstance) {\n          this.editorInstance.isReadOnly = isDisabled;\n        } // Store the state anyway to use it once the editor is created.\n\n\n        this.initiallyDisabled = isDisabled;\n      }\n      /**\n       * Creates the editor instance, sets initial editor data, then integrates\n       * the editor with the Angular component. This method does not use the `editor.setData()`\n       * because of the issue in the collaboration mode (#6).\n       */\n\n    }, {\n      key: \"attachToWatchdog\",\n      value: function attachToWatchdog() {\n        var _this = this;\n\n        var creator = function creator(element, config) {\n          return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            var _this2 = this;\n\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    return _context3.abrupt(\"return\", this.ngZone.runOutsideAngular(function () {\n                      return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                        var _this3 = this;\n\n                        var editor;\n                        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                          while (1) {\n                            switch (_context2.prev = _context2.next) {\n                              case 0:\n                                this.elementRef.nativeElement.appendChild(element);\n                                _context2.next = 3;\n                                return this.editor.create(element, config);\n\n                              case 3:\n                                editor = _context2.sent;\n\n                                if (this.initiallyDisabled) {\n                                  editor.isReadOnly = this.initiallyDisabled;\n                                }\n\n                                this.ngZone.run(function () {\n                                  _this3.ready.emit(editor);\n                                });\n                                this.setUpEditorEvents(editor);\n                                return _context2.abrupt(\"return\", editor);\n\n                              case 8:\n                              case \"end\":\n                                return _context2.stop();\n                            }\n                          }\n                        }, _callee2, this);\n                      }));\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3, this);\n          }));\n        };\n\n        var destructor = function destructor(editor) {\n          return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return editor.destroy();\n\n                  case 2:\n                    this.elementRef.nativeElement.removeChild(this.editorElement);\n\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4, this);\n          }));\n        };\n\n        var emitError = function emitError() {\n          _this.ngZone.run(function () {\n            _this.error.emit();\n          });\n        };\n\n        var element = document.createElement(this.tagName);\n        var config = this.getConfig();\n        this.editorElement = element; // Based on the presence of the watchdog decide how to initialize the editor.\n\n        if (this.watchdog) {\n          // When the context watchdog is passed add the new item to it based on the passed configuration.\n          this.watchdog.add({\n            id: this.id,\n            type: 'editor',\n            creator: creator,\n            destructor: destructor,\n            sourceElementOrData: element,\n            config: config\n          });\n          this.watchdog.on('itemError', function (_, _ref) {\n            var itemId = _ref.itemId;\n\n            if (itemId === _this.id) {\n              emitError();\n            }\n          });\n        } else {\n          // In the other case create the watchdog by hand to keep the editor running.\n          var editorWatchdog = new EditorWatchdog(this.editor);\n          editorWatchdog.setCreator(creator);\n          editorWatchdog.setDestructor(destructor);\n          editorWatchdog.on('error', emitError);\n          this.editorWatchdog = editorWatchdog;\n          this.editorWatchdog.create(element, config);\n        }\n      }\n    }, {\n      key: \"getConfig\",\n      value: function getConfig() {\n        if (this.data && this.config.initialData) {\n          throw new Error('Editor data should be provided either using `config.initialData` or `data` properties.');\n        } // Merge two possible ways of providing data into the `config.initialData` field.\n\n\n        return Object.assign(Object.assign({}, this.config), {\n          initialData: this.config.initialData || this.data || ''\n        });\n      }\n      /**\n       * Integrates the editor with the component by attaching related event listeners.\n       */\n\n    }, {\n      key: \"setUpEditorEvents\",\n      value: function setUpEditorEvents(editor) {\n        var _this4 = this;\n\n        var modelDocument = editor.model.document;\n        var viewDocument = editor.editing.view.document;\n        modelDocument.on('change:data', function (evt) {\n          _this4.ngZone.run(function () {\n            if (_this4.cvaOnChange && !_this4.isEditorSettingData) {\n              var data = editor.getData();\n\n              _this4.cvaOnChange(data);\n            }\n\n            _this4.change.emit({\n              event: evt,\n              editor: editor\n            });\n          });\n        });\n        viewDocument.on('focus', function (evt) {\n          _this4.ngZone.run(function () {\n            _this4.focus.emit({\n              event: evt,\n              editor: editor\n            });\n          });\n        });\n        viewDocument.on('blur', function (evt) {\n          _this4.ngZone.run(function () {\n            if (_this4.cvaOnTouched) {\n              _this4.cvaOnTouched();\n            }\n\n            _this4.blur.emit({\n              event: evt,\n              editor: editor\n            });\n          });\n        });\n      }\n    }, {\n      key: \"disabled\",\n      set: function set(isDisabled) {\n        this.setDisabledState(isDisabled);\n      },\n      get: function get() {\n        if (this.editorInstance) {\n          return this.editorInstance.isReadOnly;\n        }\n\n        return this.initiallyDisabled;\n      }\n      /**\n       * The instance of the editor created by this component.\n       */\n\n    }, {\n      key: \"editorInstance\",\n      get: function get() {\n        var editorWatchdog = this.editorWatchdog;\n\n        if (this.watchdog) {\n          // Temporarily use the `_watchdogs` internal map as the `getItem()` method throws\n          // an error when the item is not registered yet.\n          // See https://github.com/ckeditor/ckeditor5-angular/issues/177.\n          editorWatchdog = this.watchdog._watchdogs.get(this.id);\n        }\n\n        if (editorWatchdog) {\n          return editorWatchdog.editor;\n        }\n\n        return null;\n      }\n    }]);\n\n    return CKEditorComponent;\n  }();\n\n  CKEditorComponent.ɵfac = function CKEditorComponent_Factory(t) {\n    return new (t || CKEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CKEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CKEditorComponent,\n    selectors: [[\"ckeditor\"]],\n    inputs: {\n      config: \"config\",\n      data: \"data\",\n      tagName: \"tagName\",\n      disabled: \"disabled\",\n      editor: \"editor\",\n      watchdog: \"watchdog\"\n    },\n    outputs: {\n      ready: \"ready\",\n      change: \"change\",\n      blur: \"blur\",\n      focus: \"focus\",\n      error: \"error\"\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: /*@__PURE__*/forwardRef(function () {\n        return CKEditorComponent;\n      }),\n      multi: true\n    }])],\n    decls: 1,\n    vars: 0,\n    template: function CKEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, CKEditorComponent_ng_template_0_Template, 0, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2\n  });\n  return CKEditorComponent;\n}();\n\nvar CKEditorModule = /*@__PURE__*/function () {\n  var CKEditorModule = function CKEditorModule() {\n    _classCallCheck(this, CKEditorModule);\n  };\n\n  CKEditorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CKEditorModule\n  });\n  CKEditorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function CKEditorModule_Factory(t) {\n      return new (t || CKEditorModule)();\n    },\n    imports: [[FormsModule, CommonModule]]\n  });\n  return CKEditorModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CKEditorModule, {\n    declarations: function declarations() {\n      return [CKEditorComponent];\n    },\n    imports: function imports() {\n      return [FormsModule, CommonModule];\n    },\n    exports: function exports() {\n      return [CKEditorComponent];\n    }\n  });\n})();\n/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CKEditorComponent, CKEditorModule };","map":null,"metadata":{},"sourceType":"module"}
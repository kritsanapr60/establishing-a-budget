{"ast":null,"code":"import _classCallCheck from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kritsanaprasit/Desktop/establishing-a-budget/establishing-a-budget/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { Attribute, Directive, forwardRef, NgModule } from '@angular/core';\nimport { NG_VALIDATORS } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nvar ValidateEqualDirective_1;\n\nvar ValidateEqualDirective = /*@__PURE__*/function () {\n  var ValidateEqualDirective = ValidateEqualDirective_1 = /*#__PURE__*/function () {\n    function ValidateEqualDirective(otherControl) {\n      _classCallCheck(this, ValidateEqualDirective);\n\n      this.otherControl = otherControl;\n    }\n\n    _createClass(ValidateEqualDirective, [{\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.valueChangesSub) {\n          this.valueChangesSub.unsubscribe();\n        }\n      }\n    }, {\n      key: \"validate\",\n      value: function validate(selfControl) {\n        var _this = this;\n\n        var selfControlValue = selfControl.value;\n        var otherControl = selfControl.root.get(this.otherControl);\n\n        if (this.valueChangesSub) {\n          this.valueChangesSub.unsubscribe();\n        } // this code works when user types in other control putting the error in self control\n\n\n        this.valueChangesSub = otherControl.valueChanges.subscribe(function (otherControlValue) {\n          if (!_this.isEqual(selfControlValue, otherControlValue) && (selfControl.touched || selfControl.dirty)) {\n            selfControl.setErrors({\n              notEqual: true\n            });\n          } else {\n            if (selfControl.hasError('notEqual')) {\n              delete selfControl.errors['notEqual'];\n\n              if (!Object.keys(selfControl.errors).length) {\n                selfControl.setErrors(null);\n              }\n            }\n          }\n        }); // this code works when the user types in self control putting the error in self control\n\n        if (!this.isEqual(selfControlValue, otherControl.value) && (selfControl.touched || selfControl.dirty)) {\n          return {\n            notEqual: true\n          };\n        }\n\n        return null;\n      }\n    }, {\n      key: \"isEqual\",\n      value: function isEqual(val1, val2) {\n        val1 = this.unifyEmptyStrings(val1);\n        val2 = this.unifyEmptyStrings(val2);\n        return val1 === val2;\n      }\n    }, {\n      key: \"unifyEmptyStrings\",\n      value: function unifyEmptyStrings(val) {\n        var isDefined = this.isDefined;\n\n        if (val === null || !isDefined(val)) {\n          val = '';\n        }\n\n        return val;\n      }\n    }, {\n      key: \"isDefined\",\n      value: function isDefined(value) {\n        var defaultUndefined = void 0;\n        return value !== defaultUndefined;\n      }\n    }]);\n\n    return ValidateEqualDirective;\n  }();\n\n  ValidateEqualDirective.ɵfac = function ValidateEqualDirective_Factory(t) {\n    return new (t || ValidateEqualDirective)(ɵngcc0.ɵɵinjectAttribute('ngValidateEqual'));\n  };\n\n  ValidateEqualDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ValidateEqualDirective,\n    selectors: [[\"\", \"ngValidateEqual\", \"\"]],\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALIDATORS,\n      useExisting: /*@__PURE__*/forwardRef(function () {\n        return ValidateEqualDirective_1;\n      }),\n      multi: true\n    }])]\n  });\n  return ValidateEqualDirective;\n}();\n\nvar ValidateEqualModule = /*@__PURE__*/function () {\n  var ValidateEqualModule = function ValidateEqualModule() {\n    _classCallCheck(this, ValidateEqualModule);\n  };\n\n  ValidateEqualModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ValidateEqualModule\n  });\n  ValidateEqualModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function ValidateEqualModule_Factory(t) {\n      return new (t || ValidateEqualModule)();\n    },\n    imports: [[]]\n  });\n  return ValidateEqualModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ValidateEqualModule, {\n    declarations: [ValidateEqualDirective],\n    exports: [ValidateEqualDirective]\n  });\n})();\n/*\n * Public API Surface of ng-validate-equal\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ValidateEqualDirective, ValidateEqualModule };","map":null,"metadata":{},"sourceType":"module"}